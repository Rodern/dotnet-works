@page "/"
@rendermode InteractiveServer

<PageTitle>@AppInfo.Name - @(nameof(Products))</PageTitle>


<div class="header px-4">
	<a href="/" class="home-link flex flex-nowrap justify-center items-center">
		<img class="w-8 h-8" src="assets/logo.png" alt="Bridge Mall logo" />
		<span class="brand-name text-[#737373]">Bridge Mall</span>
	</a>

	<div class="search-box-wrapper">

		@* Search Box *@
		<FluentSearch @bind-Value="_searchValue"
		@bind-Value:after="OnSearch"
		Immediate="true"
		ImmediateDelay="500"
		Placeholder="Search for name"
		Class="search-box" />
	</div>

	<div class="user-peek" style="position: relative;">
		<button class="user-btn" @onclick="ToggleUserMenu" @ref="userBtnRef">
			<img src="assets/user.png" class="user-image" alt="user-image" />
			<div class="user-name">
				@(User == null ? "" : User.Name)
			</div>
		</button>
	</div>

</div>

@if (showUserMenu)
{
	<div class="user-context-menu absolute z-50 bg-white shadow-lg rounded-lg py-3 px-5 mt-2 right-0 min-w-[220px] border border-gray-200"
		 style="top:15%;right:4%;"
	@onclick:stopPropagation>
		<div class="mb-2">
			<span class="block text-sm text-gray-500">Email</span>
			<span class="block text-base font-medium text-gray-800">@((User?.Email) ?? "Not available")</span>
		</div>
		<button class="btn-primary w-full mt-3 py-2 rounded text-white font-semibold"
				@onclick="Logout">
			Logout
		</button>
	</div>
}

<article class="content px-4">

	@if (Products == null || Products.Count == 0)
	{
		<div class="no-products flex flex-col items-center justify-center py-16 px-4 text-center">
			<img src="assets/cart.png" alt="No products illustration" class="mb-6 max-w-xs w-full" style="opacity:0.8;" />
			<h2 class="text-2xl font-semibold text-gray-700 mb-2">No Products Available</h2>
			<p class="text-gray-500 mb-4">We're sorry, but there are currently no products to display. Please check back later or try adjusting your search.</p>
		</div>
	}
	else
	{
		<div class="product-list">
			@foreach (var product in Products)
			{
				var category = Categories.FirstOrDefault(x => x.CategoryId == product.CategoryId);
				<div class="product group pointer rounded-lg shadow-md border border-gray-200 bg-white hover:shadow-lg transition overflow-hidden flex flex-col" id="product_@(product.ProductId)">
        <div class="product-header relative">
            <div class="product-image bg-cover bg-center h-48 w-full" style="background-image: url('@(product.Image)');" role="img" aria-label="@product.Name"></div>
            <span class="absolute top-2 left-2 bg-blue-600 text-white text-xs px-2 py-1 rounded cursor-pointer"
                  @onmouseover="@(() => ShowCategoryCard(product.ProductId))"
                  @onmouseout="@HideCategoryCard"
                  @onclick="@(() => ToggleCategoryCard(product.ProductId))">
                @category!.Name
            </span>
            @if (showCategoryCardForProductId == product.ProductId && category != null)
            {
                <div class="category-hover-card absolute z-50 bg-white shadow-lg rounded-lg p-4 border border-gray-200"
                     style="top:2.5rem; left:0; min-width:220px;"
                     @onmouseleave="@HideCategoryCard">
                    <div class="flex items-center gap-2 mb-2">
                        <img src="@category.Icon" alt="@category.Name icon" class="w-6 h-6 rounded" />
                        <span class="font-semibold text-base">@category.Name</span>
                    </div>
                    <div class="text-xs text-gray-500 mb-1">Code: <span class="font-mono">@category.Code</span></div>
                    @* Add more category details here if needed *@
                </div>
            }
            <span class="product-code absolute hidden top-2 right-2 bg-gray-900/80 text-white text-xs px-2 py-1 rounded">BM-@(product.Code)</span>
        </div>
        <div class="product-body flex flex-col justify-between h-full p-4">
            <h3 class="product-name truncate-2 text-lg font-bold mb-1" title="@product.Name">@product.Name</h3>
            <p class="text-gray-600 text-[0.75rem] line-clamp-2 mb-1" title="@product.Description">@product.Description</p>
			<div class="body-details mt-2" >
                <span class="price text-xl font-bold text-[#0F6CBD]" aria-label="Price">XAF @product.Price.ToString("N2")</span>
				<div class="flex flex-row items-center gap-2 text-xs text-gray-500 mb-1">
					<span>Weight: <span class="font-medium text-gray-700">@product.Weight kg</span></span>
					<span class="mx-2">|</span>
					<span>Stock: 
						@if (product.InStock > 0)
						{
							<span class="text-green-600 font-semibold">@product.InStock</span>
						}
						else
						{
							<span class="text-red-600 font-semibold">Out of stock</span>
						}
					</span>
				</div>
			</div>
            <div class="flex flex-row items-center justify-between mt-4">
                <button class="add-to-cart transition disabled:opacity-50"
                        disabled="@(product.InStock == 0)">
                    <FluentIcon Value="new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.Cart()" Color="Color.Custom" CustomColor="var(--app-primary-color)" />
                    Add to cart
                </button>
            </div>
            @* <div class="flex flex-row justify-between text-xs text-gray-400 mt-2">
                <span>Created: @product.CreatedAt.ToString("yyyy-MM-dd")</span>
                <span>Updated: @product.UpdatedAt.ToString("yyyy-MM-dd")</span>
            </div> *@
        </div>
    </div>
			}
		</div>
	}


</article>

<FluentDialogProvider />

@code {
	private string? _searchValue;
	private int _immediateDelay;

	private const string _defaultResultsText = "No results";
	private List<string> _searchResults = DefaultResults();

	private static List<string> DefaultResults() => new() { _defaultResultsText };

	private void OnSearch()
	{
		Products = Mapper.Map<ObservableCollection<ProductDTO>>(ProductService.GetProducts(_searchValue));
	}

	UserDTO User = null!;
	ObservableCollection<CategoryDTO> Categories = new();
	ObservableCollection<ProductDTO> Products = new();

	protected override async void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			await InitializeUserData();
			StateHasChanged();

			// Register click-away handler for closing the menu
			await JSRuntime.InvokeVoidAsync("eval", @"
				document.addEventListener('click', function(e) {
					if(document.querySelector('.user-context-menu')) {
						Blazor.invokeMethodAsync('BridgeMall', 'HideUserMenu');
					}
				});
			");
		}

		base.OnAfterRender(firstRender);
	}

	private async Task InitializeUserData()
	{
		string? encryptedToken = await LocalStorageService.GetItemAsStringAsync(AppInfo.TokenKey);
		if (encryptedToken == null) return;

		string token = await JSRuntime.InvokeAsync<string>("DecodeText", encryptedToken);
		int loggedInUserId = int.Parse(await JSRuntime.InvokeAsync<string>("getUserIdFromToken", token));

		User = Mapper.Map<UserDTO>(UserService.GetUser(loggedInUserId));

	}

	protected override async Task OnInitializedAsync()
	{
		await Task.Delay(100);
		Categories = Mapper.Map<ObservableCollection<CategoryDTO>>(CategoryService.GetCategories());
		Products = Mapper.Map<ObservableCollection<ProductDTO>>(ProductService.GetProducts());
	}

	private bool showUserMenu = false;
	private ElementReference userBtnRef;

	private void ToggleUserMenu()
	{
		showUserMenu = !showUserMenu;
		StateHasChanged();
	}

	private async void Logout()
	{
		// Implement your logout logic here, for now just navigate to logout page or clear user session
		await MessageBoxHelper.ShowMessageBoxAsync("Logout?", "You are signing out?", "Yes", "No", () =>
		{
			((CustomAuthenticationStateProvider)AuthStateProvider).MarkUserAsNotAuthenticated();
			Navigation.NavigateTo("/", true);
		});
		showUserMenu = false;
	}

	private int? showCategoryCardForProductId = null;

    private void ShowCategoryCard(int productId)
    {
        showCategoryCardForProductId = productId;
        StateHasChanged();
    }

    private void HideCategoryCard()
    {
        showCategoryCardForProductId = null;
        StateHasChanged();
    }

    private void ToggleCategoryCard(int productId)
    {
        if (showCategoryCardForProductId == productId)
            showCategoryCardForProductId = null;
        else
            showCategoryCardForProductId = productId;
        StateHasChanged();
    }
}